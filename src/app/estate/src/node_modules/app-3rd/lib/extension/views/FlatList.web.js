import React, { Component } from 'react';
import { View, Text, Dimensions, StyleSheet } from 'react-native';
import { ListView, PullToRefresh } from 'antd-mobile';
import PropTypes from 'prop-types'
var { width, height } = Dimensions.get("window");


export default class FlatList extends Component {
    static propTypes = {
        style: PropTypes.object,
        data: PropTypes.array, //列表数据
        renderItem: PropTypes.func, // item
        ItemSeparatorComponent: PropTypes.any, // 分割线
        onEndReached: PropTypes.func, // 到达底部
        onEndReachedThreshold: PropTypes.number,//调用onEndReached之前的临界值，单位是像素，react-native 中这个值是一个百分比，需要做一下转换
        ListEmptyComponent: PropTypes.any,//空页面
    }

    static defaultProps = {

    }

    uniqueBaseId = `id-${Date.now()}`;
    separatorCount = 0;
    constructor(props) {
        super(props);

        // const getSectionData = (dataBlob, sectionID) => dataBlob[sectionID];
        // const getRowData = (dataBlob, sectionID, rowID) => dataBlob[rowID];
        const dataSource = new ListView.DataSource({
            // getRowData,
            // getSectionHeaderData: getSectionData,
            rowHasChanged: (row1, row2) => row1 !== row2,
            // sectionHeaderHasChanged: (s1, s2) => s1 !== s2,
        });
        this.state = {
            dataSource,
        };
    }
    _mergeStyle = () => {
        let newStyle = {
            height: '100%',
        };
        if (this.props.style) {
            newStyle = this.props.style;
            if (!newStyle.height) {
                newStyle.height = '100%';
            }
        }
        return newStyle;
    }

    componentDidMount() {
        this._genData(this.props.data);
    }

    componentWillReceiveProps(nextProps) {
        this._genData(nextProps.data);
    }

    _genData(data = []) {
        this.setState({
            dataSource: this.state.dataSource.cloneWithRows(data),
        });
    }
    _renderSeparator = () => {
        this.separatorCount++
        if (this.props.ItemSeparatorComponent) {
            let separatorComponent = null;
            if (typeof this.props.ItemSeparatorComponent === "function") {
                separatorComponent = this.props.ItemSeparatorComponent();
            } else {
                separatorComponent = this.props.ItemSeparatorComponent;
            }
            return (
                <View key={`separator-${this.uniqueBaseId}-${this.separatorCount}`}>
                    {
                        separatorComponent
                    }
                </View>
            )
        }
        return null;
    }

    _renderRow = (rowData, sectionID, rowID, highlightRow) => {
        return (
            <View key={`${this.uniqueBaseId}-${rowID}`}>
                {this.props.renderItem ? this.props.renderItem({ item: rowData, index: rowID }) : null}
            </View>
        );
    }
    /**
     * 无数据时的空白页面
     */
    _renderEmpty = () => {
        let height = this._mergeStyle().height;
        let emptyComponent = null;
        this.props.ListEmptyComponent ? this.props.ListEmptyComponent() : null
        if (this.props.ListEmptyComponent) {
            if (typeof this.props.ListEmptyComponent === "function") {
                emptyComponent = this.props.ListEmptyComponent();
            } else {
                emptyComponent = this.props.ListEmptyComponent;
            }
        }
        return (
            <View style={{ height: height }}>
                {
                    emptyComponent
                }
            </View>
        )
    }
    _pullToRefresh = () => {
        if(this.props.onRefresh){
            return (
                <PullToRefresh
                    refreshing={this.props.refreshing}
                    onRefresh={this.props.onRefresh}
                />
            )
        }
        return null;
    }

    _renderList = () => {
        return (
            <ListView
                ref={el => this.lv = el}
                horizontal={this.props.horizontal}
                initialListSize={20}
                dataSource={this.state.dataSource}
                renderHeader={this.props.ListHeaderComponent ? ()=>{this.props.ListHeaderComponent} : null }
                renderFooter={this.props.ListFooterComponent ? ()=>{this.props.ListFooterComponent} : null}
                renderRow={(rowData, sectionID, rowID, highlightRow) => { return this._renderRow(rowData, sectionID, rowID, highlightRow) }}
                renderSeparator={this._renderSeparator}
                onEndReached={this.props.onEndReached ? this.props.onEndReached : () => { console.log("reachEnd") }}
                pageSize={this.props.pageSize ? this.props.pageSize : 55}
                onScroll={() => { console.log('scroll'); }}
                scrollRenderAheadDistance={500}
                pullToRefresh={this._pullToRefresh()}
                onEndReachedThreshold={100}
                style={this._mergeStyle()}
            />
        );
    }

    render() {
        // if (this.props.data && this.props.data.length > 0) {
            return this._renderList();
        // }
        // return this._renderEmpty();
    }
}

const styles = StyleSheet.create({
    listStyle: {
        height: height,
        overflow: 'auto',
    }
})